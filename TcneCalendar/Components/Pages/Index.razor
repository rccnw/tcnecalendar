
@page "/"

@rendermode InteractiveServer

@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.SplitButtons
@using TcneShared.Models
@using Microsoft.Extensions.Caching.Memory
@using TcneCalendar
@using TcneShared
@using System.Threading.Tasks;
@using System.Diagnostics;

@inject IConfiguration  Configuration
@inject HttpClient      Http
@* @inject IMemoryCache MemoryCache *@
@inject ILoggerFactory  LoggerFactory

@inject ILogger<Index>  Logger
@inject AzureStorage    AzureStorageService
 

<PageTitle>TCNE Calendar</PageTitle>

<span class="pageheader">TCNE Calendar</span>
<br />

<div class="infoMessage">
    @Configuration["InfoMessage1"]
    <br />  
    @Configuration["InfoMessage2"]
</div>

<div style="color:white">
    Last updated from CheckFront: @LastWebHookTime
</div>

<div class="controlregion">

    <div class="btn-group" role="group" aria-label="Studio Selector">
        <button 
            type="button"
            class="btnNest btn @(activeButton == "NestButton" ? "btn btn-primary active" : "btn btn-primary")"
                @onclick='() => NestButton("NestButton")'
            style="width:120px">
            Nest
         </button>

        <button 
            type="button"
                class="btnHideout btn @(activeButton == "HideoutButton" ? "btn btn-primary active" : "btn btn-primary")"
                @onclick='() => HideoutButton("HideoutButton")'
            style="width:120px">
            Hideout
        </button>

        <button 
            type="button"
                class="btnAll btn @(activeButton == "AllButton" ? "btn btn-primary active" : "btn btn-primary")"
                @onclick='() => AllButton("AllButton")'
            style="width:120px">
            All
        </button>


    </div>
    <br />
    <br />

    <div class="btn-group" role="group" aria-label="TimeRange Selector">
        <button type="button"
                class="btn @(timeButton == "DayButton" ? "btn btn-primary active" : "btn btn-primary")"
                @onclick='() => DayButton("DayButton")'
                style="width:120px">
            Day
        </button>

        <button type="button"
                class="btn @(timeButton == "WeekButton" ? "btn btn-primary active" : "btn btn-primary")"
                @onclick='() => WeekButton("WeekButton")'
                style="width:120px">
            Week
        </button>

        <button type="button"
                class="btn @(timeButton == "MonthButton" ? "btn btn-primary active" : "btn btn-primary")"
                @onclick='() => MonthButton("MonthButton")'
                style="width:120px">
            Month
        </button>




    </div>
    <br />
    <br />

    <br />
    <SfSchedule TValue="SchedulerAppointmentData"
        Readonly = "true"
        AllowDragAndDrop="false" 
        ShowQuickInfo="true" 
        EnableAutoRowHeight="true"
        EnableAdaptiveUI="true"

        @bind-CurrentView="@CurrentView"
        @bind-SelectedDate="@CurrentDate">
        <ScheduleViews>
            <ScheduleView Option="View.Day"></ScheduleView>
            <ScheduleView Option="View.Week" ></ScheduleView>
            <ScheduleView Option="View.Month"></ScheduleView>
        </ScheduleViews>
        <ScheduleEventSettings DataSource="@DataSource" EnableTooltip="true"></ScheduleEventSettings>





    </SfSchedule>
</div>

<style>

    .e-current-date {
        display: none !important;
        // To hide Today option
    }


    .e-today {
        display: none !important;
        // To hide Today option
    }

    .btnNest {
        background-color: green !important;
    }

    .btnHideout {
        background-color: blue !important;
    }

    .btnAll {
        background-color: black !important;
    }


    .btn-group .btn.active {
        border-color: red;
    }


    .ulstyle {
        margin-top: 10px;
        margin-bottom: 20px;
        display: inline-block;
        list-style-type: none !important;
        padding-left: 0px !important;
    }

    .controlregion {
        margin-top: 0px;
        margin-bottom: 0px;
        max-height: 100px;
    }

    .pagecontent {
        font-family: sans-serif !important;
        font-size: 16px;
        color: #333333;
        letter-spacing: 0.34px;
        line-height: 24px;
        margin-top: 10px;
    }
    

    .list {
        float: left;
        line-height: 40px;
        min-width: 280px;
        font-family: sans-serif !important;
        font-size: 19px;
        color: #0073DC;
    }

    .syncfusion-blazor-index-icons {
        font-family: "sbicons";
        color: #0073DC !important;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        padding-right: 13px;
        font-size: 18px;
    }

    .productheader {
        font-family: sans-serif !important;
        font-size: 19px !important;
        color: #333333 !important;
        letter-spacing: 0.41px ;
    }

    .pageheader {
        font-family: sans-serif !important;
        font-size: 24px !important;
        color: #333333 ;
        font-weight: bold !important;
    }


    .e-appointment.nest {
        background: lightblue;
    }

    .e-appointment.hideout {
        background: darkgreen;
    }

    .e-appointment.unknown {
        background: purple;
    }


    .nest {
        background: lightblue;
    }

    .hideout {
        background: lightgreen;
    }

    .unknown {
        background: blue;
    }


    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.nest,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.nest,
    .e-schedule .e-month-view .e-appointment.nest {
        background: green;
    }

    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.hideout,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.hideout,
    .e-schedule .e-month-view .e-appointment.hideout {
        background: blue;
    }     
   
 </style>

@code {

    public DateTime CurrentDate { get; set; }   // data binding with scheduler

    string displayLocation          = "nest";
    private string activeButton     = "AllButton"; // Default active button
    private string timeButton       = "DayButton"; 
    public string LastWebHookTime = string.Empty;


    public async void NestButton(string buttonId)
    {
        Logger.LogInformation("NestButton() called");
        activeButton = buttonId;
        displayLocation = "nest";
        await RefreshDataSource();
    }

    public async void HideoutButton(string buttonId)
    {
        Logger.LogInformation("HideoutButton() called");
        activeButton = buttonId;
        displayLocation = "hideout";
        await RefreshDataSource();
    }

    public async void AllButton(string buttonId)
    {
        Logger.LogInformation("AllButton() called");
        activeButton = buttonId;
        displayLocation = "all";
        await RefreshDataSource();
    }

    public async void DayButton(string buttonId)
    {
        Logger.LogInformation("DayButton() called");
        timeButton = buttonId;
        CurrentView = View.Day;
        await RefreshDataSource();
    }

    public async void WeekButton(string buttonId)
    {
        Logger.LogInformation("WeekButton() called");
        timeButton = buttonId;
        CurrentView = View.Week;
        await RefreshDataSource();
    }
    public async void MonthButton(string buttonId)
    {
        Logger.LogInformation("MonthButton() called");
        timeButton = buttonId;
        CurrentView = View.Month;
        await RefreshDataSource();
    }

    public List<SchedulerAppointmentData>? DataSource;   // Scheduler Appointment Data

    View CurrentView = View.Day;


    protected async override Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync() called");

        #region Hidden LastWebHookTime

        // get the last azure function run timestamp from storage account
        var dtOffset = await AzureStorageService.GetLastWebhookRunTime();

        TimeZoneInfo pacificZone = TimeZoneInfo.FindSystemTimeZoneById("Pacific Standard Time");
        DateTime dtLocal = TimeZoneInfo.ConvertTimeFromUtc(dtOffset.Value.DateTime, pacificZone);

        // format dtLocal into a displayable string - this is 'hidden' via css and exists as a troubleshooting aid, 
        // just 'select' the text in the browser to read it. (its just under the other visible text at the top)
        var ampm = "AM";
        if (dtLocal.Hour >= 12) { ampm = "PM"; }
        var hour = ((dtLocal.Hour + 11) % 12) + 1;
        var minute = dtLocal.Minute;
        var date  = dtLocal.ToShortDateString();
        string minuteLeadingZero = minute.ToString();
        if (minute < 10) { minuteLeadingZero = minute.ToString().PadLeft(2, '0'); }
        LastWebHookTime = date + " " + hour + ":" + minuteLeadingZero + " " + ampm;
        #endregion



        await base.OnInitializedAsync();
    }


    private async Task RefreshDataSource()
    {
        List<SchedulerAppointmentData> listAppts = await AzureStorageService.LoadAppointmentsAzure(displayLocation);
        DataSource = listAppts;
        StateHasChanged();  
        Debug.WriteLine("RefreshSchedule() called  listAppts.Count:  {listAppts.Count}");
        Logger.LogInformation("RefreshSchedule() called  listAppts.Count:  {listAppts.Count}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync() called");
        if (firstRender)
        {
            displayLocation = "all";
            AllButton("AllButton");

            await RefreshDataSource();

            // DateTime dtUtcNow = DateTime.UtcNow;
            // var dtUtcLater = dtUtcNow.AddDays(7);

            // CurrentDate is used by the Scheduler component to indicate 'today' 
            TimeZoneInfo pacificZone = TimeZoneInfo.FindSystemTimeZoneById("Pacific Standard Time");
            DateTime dtLocalTimeZone = TimeZoneInfo.ConvertTimeFromUtc(DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Utc), pacificZone);

            CurrentDate = dtLocalTimeZone.Date; // need to assign something, but the value is ignored by the scheduler. it has its own opinion about today

            CurrentView = View.Day;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}