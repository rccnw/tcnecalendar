
TCNE Calendar App

Developer:  Rob Campbell rcc@pobox.com  2024-02-07


This project is in support of the Crow's Nest Escape rental facility in Seattle, WA.  ('TCNE'))
This business has two rental facilities, the 'Nest' and the 'Escape'.  Each facility is rented separately.
TCNE has a public website hosted on Wix.  
TCNE is managed via the CheckFront booking system.
The purpose is to provide a limited mirror of the CheckFront Bookings calendar for the Crow's Nest Escape and Hideout.
That will allow renters to see available times at each facility.  It is not intended to be used for booking or reservation purposes.


see: https://www.thecrowsnestescape.com  (Wix site)


This project is intended to provide an indication of available times at each facility.
It does so by fetching data from the CheckFront API and displaying it in a calendar format.

The public facing website is available at the following URL:
See: https://tcne.azurewebsites.net/  (Azure hosted site)

This site is currently also available on the Wix site via an iFrame on the ProBookings page. (password required)
(this page may be deprecated soon)
https://www.thecrowsnestescape.com/probooking



This project is created using Microsoft technologies and hosted on Microsoft Azure Cloud.
The project is maintained in a Git source code control repository 'tcnecalendar' on GitHub. 
This is Rob Campbell's personal GitHub account.  In the future, it may be moved to a more appropriate account under the Crow's Nest Escape business.

see:  https://github.com/rccnw/tcnecalendar 


Required Accounts and Services:

A Microsoft account.
A Microsoft Azure subscription account
A GitHub account for source code control.
A CheckFront account login associated with the Crow's Nest Escape business.


Development Environment:

Microsoft Visual Studio 2022 Community edition or later
.NET 8.0 or later installed
SyncFusion Studio Template
Git source code control installed and configured

SyncFusion is a vendor of UI components for .NET development.  This project uses a Community License for SyncFusion components.
This license is under the name of Rob Campbell, and is not transferrable to other developers or organizations.
The license key is not included in the source code repository.  It is required to build and deploy the project.
It is stored locally on the development machine in the 'User Secrets' store, which is a feature of Visual Studio.
The same information is also stored in the Azure App Service configuration settings for both the web app and the function app.
see:  https://support.syncfusion.com/kb/article/9795/how-to-get-community-license-and-install-it

Cloud Services:

This project uses the following Azure Cloud services:

subscription:  Pay-As-You-Go VSP (personal account - need TCNE account)
resource group: 'crowsnest'
App Service plan (for Web App)
App Service plan (for Function App)
App Service (for Web App)
Function App (for Azure Functions)
Storage account
Application Insights
Metric alert rule
Action group
Smart detector alert rule
Smart detector alert rule

Overview of the Project:

A website which has a calendar display of bookings. The calendar itself is non-interactive, but options exist for filtering and modifying the display.
Several Azure Functions represent the 'backend' of the project.  
These functions are triggered by HTTP requests and Timers.
The data is fetched by the Azure Functions from the CheckFront API and stored in an Azure Storage Account.
CheckFront is configured to use the 'TcneFunctionApp' as a WebHook notification endpoint for booking changes.
Booking modifications in CheckFront will trigger the 'TcneFunctionApp' to fetch the updated data from CheckFront and store it in the Azure Storage Account.
A timer function is used to periodically (once per hour) fetch data from CheckFront and store it in the Azure Storage Account as a guarantee of data freshness.


To Build and Deploy:

clone the Git repository to your local development environment
open the solution in Visual Studio
select 'Manage User Secrets' from the project context menu, and copy in the required info (this is handled manually by TCNE staff))
build the solution
Ensure the required Azure resources are created and configured in the Azure portal.
download publish profiles from Azure for both the App Service and the Function App.
publish the CheckFrontAzureFunction project and TcneCalendar project.

Testing:

in a browser, navigate to the URL of Function App api
https://tcnefunctionapp.azurewebsites.net/api/CheckFrontFunction

This will activate the CheckFrontFunction, which will in turn activate the HttpHelperFunction,
which will fetch data from the CheckFront API and store it in an Azure Storage Account.

It is also possible to activate the HttpHelperFunction directly in the same way.
This doesn't add much value since the CheckFrontFunction activates it (and does little else), but it is a way to test the function independently.
https://tcnefunctionapp.azurewebsites.net/api/HttpHelperFunction

The TcneCalendar web app will fetch data from the Azure Storage Account and display it in the calendar UI.
The TcneCalendar web app is a non-interactive display of the CheckFront booking data.  
It is not intended to be used for booking or reservation purposes.

The TcneCalendar web app is hosted on Microsoft Azure Cloud as an App Service in the Free Tier.


Project source code details:

Created using SyncFusion Studio Template for Blazor
configurations:
    Blazor Web App
    Included Shceduler, Media Queries, ButtonGroup
    .NET 8


Git Repo
https://github.com/rccnw/tcnecalendar.git





This project is intended to provide a limited mirror of the CheckFront Bookings calendar for the Crow's Nest Escape and Hideout.

It can be accessed on the web via the Crow's Nest Wix website and directly on Azure.

Wix:					https://www.thecrowsnestescape.com/probooking (requires password 'TCNEPRO')
Microsoft Azure Cloud:	https://tcne.azurewebsites.net/

The purpose is only to provide an indication of available times at each facility. 

The site is hosted on Azure, but in Wix a feature named 'embed code' allows an iFrame on the Wix site 
to use an external URL to render the iFrame client area.

See the page called 'Pro Booking' in the Wix Editor for the Crow's Nest site.


Terms:
studio		- either the Nest or the Escape
booking		- a reservation for time at one of the studios



Requirements:

This Calendar is non-interactive.
Bookings are displayed on a calendar showing reserved times as blocks of varying height by reservation duration.
Bookings are only displayed from the current date forward.
A set of buttons will allow select of data from the Nest, the Escape, or Both.  
Site reservations are color coded.
Exlude any bookings that are VOID or CANCEL status.
The Calendar is not guaranteed to be accurate, as the data refresh from CheckFront API is 'as needed' 
Only Start/End time, facility name, and booking status is displayed.  





!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Assumption:

The Booking detail data is fetched from the CheckFront API at the booking/booking_id endpoint
A separate API call is required to get this detail data for each booking (rental)
That API call returns detail data about the booking, including a list of 'items', each item has 3 values we need: 
	1) start_date (encoded datetime)
	2) end_date (encoded datetime)
	3) category_id (13 Nest,  14 = Hideout)


These 'items' are the actual rental records, and are the basis for the calendar display.

json excerpt:

    "items": {
      "1": {
        "start_date": 1703894400,     (unix timestamp, seconds since 1970-01-01 00:00:00 UTC))
        "end_date": 1703901600,
        "category_id": 13,            (13 = Nest, 14 = Hideout))
        ...
      }
    },
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


This project is a web application created using Microsoft Blazor, a web technology using .NET and C# for web development.

This project was created in Microsoft Visual Studio 2022 Community edition, an IDE (integrated development environment) for .NET development.

This project uses proprietary UI components by SyncFusion, using a Community License.
This project was created using a SyncFusion application starter template : 'SyncFusion Blazor Template Studio'
The project type is 'SyncFusion Blazor Web App'. 
'Blazor Web App' is the name of a Microsoft starter template introduced in .NET 8 in November 2023.

Summary:
Template:       SyncFusion Blazor Template Studio
Project Type:   SyncFusion Blazor Web App
Config: 		HTTPS
Version:		.NET 8.0
Theme:			Fluent
Auth:			None
Interactivity:	Server, Per page/component

This application is hosted on Microsoft Azure Cloud as an App Service in the Free Tier.
Access to the CheckFront API uses Basic Auth Tokens.
This application is registered with the CheckFront API using Microsoft Azure Cloud URL:	https://tcne.azurewebsites.net/


https://portal.azure.com

resource group: crowsnest
Location:       West US 3

App Service/Web App:    tcne    West US 3
App Service Plan:       tcne    West US 3
Application Insights:   tcne    West US 3
Smart detector alert rule:  Failure Anomalies - tcne  Global

Storage Account:        tcne    West US 3       

    Standard (general purpose v2) 
    LRS locally redundant (lowest cost)  
    Hot
    Network access : disable public access and use private access

Managed Identity for App Service

Tutorial: Access Azure services from a .NET web app
https://learn.microsoft.com/en-us/azure/app-service/scenario-secure-app-access-storage?tabs=azure-portal




===========================================================
Random Dev Notes:  

Register Syncfusion license https://help.syncfusion.com/common/essential-studio/licensing/how-to-generate


https://tcne.checkfront.com/manage/developer/edit/?clientId=7697c358461a802d4e9750e64f8849ceba60950a


API Endpoint
https://tcne.checkfront.com/api/3.0/

Authentication Type
Token

When send in request header using HTTP Basic authorization, allows direct access to API endpoints


Appointments in Blazor Scheduler Component
https://blazor.syncfusion.com/documentation/scheduler/appointments

To create an event on Scheduler, it is enough to define the StartTime and EndTime fields.

Style And Appearance in Blazor Scheduler Component
https://blazor.syncfusion.com/documentation/scheduler/scheduler-styling

Getting Started with Blazor ButtonGroup Component
https://blazor.syncfusion.com/documentation/button-group/getting-started

How to troubleshoot server and client exceptions in Blazor
https://blazor.syncfusion.com/documentation/common/how-to/troubleshoot


https://blazor.syncfusion.com/documentation/scheduler/views

Convert Unix Timestamp to DateTime
https://www.epochconverter.com/

Azure uses UTC Everywhere

1708225200

Your time zone: Saturday, February 17, 2024 7:00:00 PM GMT-08:00


https://devblogs.microsoft.com/dotnet/date-time-and-time-zone-enhancements-in-net-6/#time-zone-conversion-apis


https://stackoverflow.com/questions/17632584/how-to-get-the-unix-timestamp-in-c-sharp
https://learn.microsoft.com/en-us/dotnet/api/system.timeprovider?view=net-8.0






https://tcne.scm.azurewebsites.net/


https://tcne.scm.azurewebsites.net/api/dump



https://tcne.checkfront.com/api/3.0/company




https://www.worldtimebuddy.com/utc-to-gmt-converter







2024-02-07T03:11:52Z   [Warning]   --------------------------------
2024-02-07T03:11:52Z   [Error]   BookingId is 213
2024-02-07T03:11:52Z   [Warning]   --------------------------------
2024-02-07T03:11:52Z   [Warning]   BookingId 213  Detail Item 0  : Items Count:  8

2024-02-07T03:11:52Z   [Warning]   BookingId 213  Detail Item 0  :  1711494000 - 1711522800     Tuesday,   March 26, 2024  4:00:00 PM  - Wednesday, March 27, 2024 12:00:00 AM 
2024-02-07T03:11:52Z   [Warning]   BookingId 213  Detail Item 1  :  1711522800 - 1711609200     Wednesday, March 27, 2024 12:00:00 AM  - Thursday,  March 28, 2024 12:00:00 AM 
2024-02-07T03:11:52Z   [Warning]   BookingId 213  Detail Item 2  :  1711609200 - 1711695600     Thursday,  March 28, 2024 12:00:00 AM  - Friday,    March 29, 2024 12:00:00 AM
2024-02-07T03:11:52Z   [Warning]   BookingId 213  Detail Item 3  :  1711695600 - 1711782000     Friday,    March 29, 2024 12:00:00 AM  - Saturday,  March 30, 2024 12:00:00 AM
2024-02-07T03:11:52Z   [Warning]   BookingId 213  Detail Item 4  :  1711782000 - 1711868400     Saturday,  March 30, 2024 12:00:00 AM  - Sunday,    March 31, 2024 12:00:00 AM
2024-02-07T03:11:52Z   [Warning]   BookingId 213  Detail Item 5  :  1711868400 - 1711954800     Sunday,    March 31, 2024 12:00:00 AM  - Monday,    April 1,  2024 12:00:00 AM
2024-02-07T03:11:52Z   [Warning]   BookingId 213  Detail Item 6  :  1711954800 - 1712041200     Monday,    April 1,  2024 12:00:00 AM  - Tuesday,   April 2,  2024 12:00:00 AM
2024-02-07T03:11:52Z   [Warning]   BookingId 213  Detail Item 7  :  1712041200 - 1712073600     Tuesday,   April 2,  2024 12:00:00 AM  - Tuesday,   April 2,  2024  9:00:00 AM 



https://www.epochconverter.com/





    /// <summary>
    /// storage account name:   tcne
    /// container name:  appointments
    ///   "AzureStorageAccountName" :  "tcne",
    /// AzureStorageAccountContainerName":  "appointments"
    /// https://github.com/Azure-Samples/ms-identity-easyauth-dotnet-storage-graphapi/tree/main/1-WebApp-storage-managed-identity
    /// 
    /// https://learn.microsoft.com/en-us/azure/storage/blobs/storage-blob-download
    /// 
    /// https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite?tabs=visual-studio%2Cblob-storage#install-azurite
    /// 
    /// </summary>


