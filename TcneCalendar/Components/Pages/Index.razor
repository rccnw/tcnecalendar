
@page "/"

@rendermode InteractiveServer

@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.SplitButtons
@using TcneShared.Models
@using Microsoft.Extensions.Caching.Memory
@using TcneCalendar
@using TcneShared
@using System.Threading.Tasks;
@using System.Diagnostics;

@inject IConfiguration  Configuration
@inject HttpClient      Http
@* @inject IMemoryCache MemoryCache *@
@inject ILoggerFactory  LoggerFactory

@inject ILogger<Index>  Logger
@inject AzureStorage    AzureStorageService

    

<PageTitle>TCNE Calendar</PageTitle>

<span class="pageheader">TCNE Calendar</span>
<br />

<div class="infoMessage">
    @Configuration["InfoMessage"]
</div>

<div class="controlregion">

    <div class="btn-group" role="group" aria-label="Studio Selector">
        <button 
            type="button"
            class="btn @(activeButton == "NestButton" ? "btn btn-primary active" : "btn btn-primary")"
                @onclick='() => NestButton("NestButton")'
            style="width:120px">
            Nest
         </button>

        <button 
            type="button" 
            class="btn @(activeButton == "HideoutButton" ? "btn btn-primary active" : "btn btn-primary")"
                @onclick='() => HideoutButton("HideoutButton")'
            style="width:120px">
            Hideout
        </button>

        <button 
            type="button" 
            class="btn @(activeButton == "AllButton" ? "btn btn-primary active" : "btn btn-primary")"
                @onclick='() => AllButton("AllButton")'
            style="width:120px">
            All
        </button>


    </div>
    <br />
    <br />

    <br />
    <SfSchedule TValue="SchedulerAppointmentData"
        Readonly = "true"
        AllowDragAndDrop="false" 
        ShowQuickInfo="true" 
        EnableAutoRowHeight="true"  
        Height="650px"
        EnableAdaptiveUI="true"
        @bind-CurrentView="@CurrentView"
        @bind-SelectedDate="@CurrentDate">

        <ScheduleViews>
            <ScheduleView Option="View.Day" ></ScheduleView>
            <ScheduleView Option="View.Week"></ScheduleView>
            <ScheduleView Option="View.Month" IsSelected="true"></ScheduleView>
        </ScheduleViews>

        <ScheduleEventSettings DataSource="@DataSource" EnableTooltip="true"></ScheduleEventSettings>

    </SfSchedule>
</div>

<style>

    .btn-group .btn.active {
        border-color: red;
    }


    .ulstyle {
        margin-top: 10px;
        margin-bottom: 20px;
        display: inline-block;
        list-style-type: none !important;
        padding-left: 0px !important;
    }

    .controlregion {
        margin-top: 50px;
    }

    .pagecontent {
        font-family: sans-serif !important;
        font-size: 16px;
        color: #333333;
        letter-spacing: 0.34px;
        line-height: 24px;
        margin-top: 10px;
    }
    

    .list {
        float: left;
        line-height: 40px;
        min-width: 280px;
        font-family: sans-serif !important;
        font-size: 19px;
        color: #0073DC;
    }

    .syncfusion-blazor-index-icons {
        font-family: "sbicons";
        color: #0073DC !important;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        padding-right: 13px;
        font-size: 18px;
    }

    .productheader {
        font-family: sans-serif !important;
        font-size: 19px !important;
        color: #333333 !important;
        letter-spacing: 0.41px ;
    }

    .pageheader {
        font-family: sans-serif !important;
        font-size: 24px !important;
        color: #333333 ;
        font-weight: bold !important;
    }


    .e-appointment.nest {
        background: lightblue;
    }

    .e-appointment.hideout {
        background: darkgreen;
    }

    .e-appointment.unknown {
        background: purple;
    }


    .nest {
        background: lightblue;
    }

    .hideout {
        background: lightgreen;
    }

    .unknown {
        background: blue;
    }


    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.nest,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.nest,
    .e-schedule .e-month-view .e-appointment.nest {
        background: green;
    }

    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.hideout,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.hideout,
    .e-schedule .e-month-view .e-appointment.hideout {
        background: blue;
    }

/*     .e-appointment-details {
        display: none;
    }
    .e-time {
        display: none;
    } */



</style>

@code {

    public DateTime CurrentDate     = DateTime.Now;
    string displayLocation          = "nest";
    private string activeButton     = "AllButton"; // Default active button



    public async void NestButton(string buttonId)
    {
        Logger.LogInformation("NestButton() called");
        activeButton = buttonId;
        displayLocation = "nest";
        await RefreshDataSource();
    }

    public async void HideoutButton(string buttonId)
    {
        Logger.LogInformation("HideoutButton() called");
        activeButton = buttonId;
        displayLocation = "hideout";
        await RefreshDataSource();
    }

    public async void AllButton(string buttonId)
    {
        Logger.LogInformation("AllButton() called");
        activeButton = buttonId;
        displayLocation = "all";
        await RefreshDataSource();
    }


    public List<SchedulerAppointmentData>? DataSource;   // Scheduler Appointment Data

    View CurrentView = View.Day;


    protected async override Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync() called");
        await base.OnInitializedAsync();
    }


    private async Task RefreshDataSource()
    {
        List<SchedulerAppointmentData> listAppts = await AzureStorageService.LoadAppointmentsAzure(displayLocation);

        //---------------------
      // List<SchedulerAppointmentData> listApptsDebug = new List<SchedulerAppointmentData>();

        // foreach(var appt in listAppts)
        // {
        //     appt.Subject    = "Cancelled";
        //    // appt.Description = "Description";

        //   //  listApptsDebug.Add(appt);
        // }
        //---------------------

        DataSource = listAppts;
        StateHasChanged();  
        Debug.WriteLine("RefreshSchedule() called  listAppts.Count:  {listAppts.Count}");
        Logger.LogInformation("RefreshSchedule() called  listAppts.Count:  {listAppts.Count}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync() called");
        if (firstRender)
        {
            displayLocation = "all";
            AllButton("AllButton");

            await RefreshDataSource();

            CurrentView = View.Month;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
